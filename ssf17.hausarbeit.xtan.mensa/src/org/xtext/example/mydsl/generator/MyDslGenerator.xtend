/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.Tag
//determine the file name of the Java class that each Entity should yield. 
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {
	
	@Inject extension IQualifiedNameProvider
//	@Inject extension IQualifiedNameProvider	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
    
   	val html = '''
			<!DOCTYPE html>
			<html>
			<head>
				<title>Greetings, Earthlings!</title>
			</head>
			<body>
					«FOR Tag tag : resource.allContents.toIterable.filter(Tag)»
«««						«IF tag.children === null»
«««key word "class" is pre-deifined => class_h instead of class
							<«tag.name» id="«tag.id.name»" class="«tag.class_h.name»">
								«tag.content.name»
								«IF tag.children !== null»
«««									«FOR Tag child : resource.allContents.toIterable.filter(tag.children)»
«««										
«««									«ENDFOR»
									<h3>!Children!</h3>
								«ENDIF»
							<«tag.name»/>	
«««						«ENDIF»
					«ENDFOR»
			</body>
			</html>
		'''
   	
   	
   	fsa.generateFile('mensa_speiseplan.html', html.toString());

	}
//	    def htmlGenerator(){
//    	
//    }
}
