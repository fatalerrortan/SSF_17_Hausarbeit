/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Button;
import org.xtext.example.mydsl.myDsl.Checkbox;
import org.xtext.example.mydsl.myDsl.Description;
import org.xtext.example.mydsl.myDsl.Footer;
import org.xtext.example.mydsl.myDsl.Header;
import org.xtext.example.mydsl.myDsl.Link;
import org.xtext.example.mydsl.myDsl.Mensamodel;
import org.xtext.example.mydsl.myDsl.Menu;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.NAV;
import org.xtext.example.mydsl.myDsl.Radio;
import org.xtext.example.mydsl.myDsl.Selector;
import org.xtext.example.mydsl.myDsl.Sidebar;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.BUTTON:
				sequence_Button(context, (Button) semanticObject); 
				return; 
			case MyDslPackage.CHECKBOX:
				sequence_Checkbox(context, (Checkbox) semanticObject); 
				return; 
			case MyDslPackage.DESCRIPTION:
				sequence_Description(context, (Description) semanticObject); 
				return; 
			case MyDslPackage.FOOTER:
				sequence_Footer(context, (Footer) semanticObject); 
				return; 
			case MyDslPackage.HEADER:
				sequence_Header(context, (Header) semanticObject); 
				return; 
			case MyDslPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case MyDslPackage.MENSAMODEL:
				sequence_Mensamodel(context, (Mensamodel) semanticObject); 
				return; 
			case MyDslPackage.MENU:
				sequence_Menu(context, (Menu) semanticObject); 
				return; 
			case MyDslPackage.NAV:
				sequence_NAV(context, (NAV) semanticObject); 
				return; 
			case MyDslPackage.RADIO:
				sequence_Radio(context, (Radio) semanticObject); 
				return; 
			case MyDslPackage.SELECTOR:
				sequence_Selector(context, (Selector) semanticObject); 
				return; 
			case MyDslPackage.SIDEBAR:
				sequence_Sidebar(context, (Sidebar) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Button returns Button
	 *
	 * Constraint:
	 *     (name=ID title=Description href=STRING)
	 */
	protected void sequence_Button(ISerializationContext context, Button semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BUTTON__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BUTTON__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BUTTON__TITLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BUTTON__TITLE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.BUTTON__HREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.BUTTON__HREF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getButtonAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getButtonAccess().getTitleDescriptionParserRuleCall_3_0(), semanticObject.getTitle());
		feeder.accept(grammarAccess.getButtonAccess().getHrefSTRINGTerminalRuleCall_5_0(), semanticObject.getHref());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Checkbox returns Checkbox
	 *
	 * Constraint:
	 *     (name=ID title=Description options+=STRING*)
	 */
	protected void sequence_Checkbox(ISerializationContext context, Checkbox semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Description returns Description
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Description(ISerializationContext context, Description semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DESCRIPTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DESCRIPTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDescriptionAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Footer returns Footer
	 *
	 * Constraint:
	 *     (name=ID description=Description links+=Link*)
	 */
	protected void sequence_Footer(ISerializationContext context, Footer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Header returns Header
	 *
	 * Constraint:
	 *     (name=ID description=Description nav+=NAV*)
	 */
	protected void sequence_Header(ISerializationContext context, Header semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Link returns Link
	 *
	 * Constraint:
	 *     (name=ID description=Description url=STRING)
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LINK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LINK__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LINK__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LINK__DESCRIPTION));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LINK__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LINK__URL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLinkAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLinkAccess().getDescriptionDescriptionParserRuleCall_3_0(), semanticObject.getDescription());
		feeder.accept(grammarAccess.getLinkAccess().getUrlSTRINGTerminalRuleCall_5_0(), semanticObject.getUrl());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Mensamodel returns Mensamodel
	 *
	 * Constraint:
	 *     (header=Header sidebar+=Sidebar* footer+=Footer+ menus+=Menu+)
	 */
	protected void sequence_Mensamodel(ISerializationContext context, Mensamodel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Menu returns Menu
	 *
	 * Constraint:
	 *     (name=ID meal=STRING description=Description price=STRING image=STRING)
	 */
	protected void sequence_Menu(ISerializationContext context, Menu semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MENU__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MENU__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MENU__MEAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MENU__MEAL));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MENU__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MENU__DESCRIPTION));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MENU__PRICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MENU__PRICE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MENU__IMAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MENU__IMAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMenuAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMenuAccess().getMealSTRINGTerminalRuleCall_4_0(), semanticObject.getMeal());
		feeder.accept(grammarAccess.getMenuAccess().getDescriptionDescriptionParserRuleCall_5_0(), semanticObject.getDescription());
		feeder.accept(grammarAccess.getMenuAccess().getPriceSTRINGTerminalRuleCall_7_0(), semanticObject.getPrice());
		feeder.accept(grammarAccess.getMenuAccess().getImageSTRINGTerminalRuleCall_9_0(), semanticObject.getImage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NAV returns NAV
	 *
	 * Constraint:
	 *     (name=ID description=Description href=STRING)
	 */
	protected void sequence_NAV(ISerializationContext context, NAV semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NAV__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NAV__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NAV__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NAV__DESCRIPTION));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NAV__HREF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NAV__HREF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNAVAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getNAVAccess().getDescriptionDescriptionParserRuleCall_3_0(), semanticObject.getDescription());
		feeder.accept(grammarAccess.getNAVAccess().getHrefSTRINGTerminalRuleCall_5_0(), semanticObject.getHref());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Radio returns Radio
	 *
	 * Constraint:
	 *     (name=ID title=Description options+=STRING*)
	 */
	protected void sequence_Radio(ISerializationContext context, Radio semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Selector returns Selector
	 *
	 * Constraint:
	 *     (name=ID title=Description options+=STRING*)
	 */
	protected void sequence_Selector(ISerializationContext context, Selector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sidebar returns Sidebar
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=Description 
	 *         radio+=Radio* 
	 *         checkbox+=Checkbox* 
	 *         selector+=Selector* 
	 *         button+=Button*
	 *     )
	 */
	protected void sequence_Sidebar(ISerializationContext context, Sidebar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
