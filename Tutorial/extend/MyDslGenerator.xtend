/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
//get data structure of "Entity" we have defined in DSL
import org.xtext.example.mydsl.myDsl.Entity
//use annotation @inject
import com.google.inject.Inject
//determine the file name of the Java class that each Entity should yield. 
import org.eclipse.xtext.naming.IQualifiedNameProvider

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
 
class MyDslGenerator extends AbstractGenerator {
	@Inject extension IQualifiedNameProvider	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		   for (e : resource.allContents.toIterable.filter(Entity)) {
        		fsa.generateFile(
            	e.fullyQualifiedName.toString("/") + ".java",
            	e.compile)
    	}
	}
	
	def compile(Entity e) '''
    	<<IF e.eContainer.fullyQualifiedName !== null>>;
    	package <<e.eContainer.fullyQualifiedNam>>;
    	<<ENDIF>>
        
    	  public class <<e.name>> <<IF e.superType !== null
    	            >>extendsã€€<<e.superType.fullyQualifiedName>> <<ENDI>>{
    	    }
'''	
}
